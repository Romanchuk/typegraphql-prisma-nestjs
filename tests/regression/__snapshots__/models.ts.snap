// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`models should properly generate object type class for mongo prisma model with nested types: User 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../scalars\\";
import { UserAddress } from \\"../models/UserAddress\\";

@ObjectType(\\"User\\", {
  isAbstract: true
})
export class User {
  @Field(_type => String, {
    nullable: false
  })
  id!: string;

  @Field(_type => Int, {
    nullable: true
  })
  age?: number | null;

  @Field(_type => UserAddress, {
    nullable: false
  })
  address!: UserAddress;
}
"
`;

exports[`models should properly generate object type class for mongo prisma model with nested types: UserAddress 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../scalars\\";

@ObjectType(\\"UserAddress\\", {
  isAbstract: true
})
export class UserAddress {
  @Field(_type => String, {
    nullable: false
  })
  street!: string;

  @Field(_type => Int, {
    nullable: true
  })
  number?: number | null;

  @Field(_type => String, {
    nullable: false
  })
  city!: string;
}
"
`;

exports[`models should properly generate object type class for prisma model when simpleResolvers option is enabled: User 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../scalars\\";

@ObjectType(\\"User\\", {
  isAbstract: true,
  simpleResolvers: true
})
export class User {
  @Field(_type => Int, {
    nullable: false
  })
  id!: number;

  @Field(_type => Date, {
    nullable: false
  })
  dateOfBirth!: Date;

  @Field(_type => Float, {
    nullable: true
  })
  balance?: number | null;
}
"
`;

exports[`models should properly generate object type class for prisma model with descriptions: User 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../scalars\\";
import { Post } from \\"../models/Post\\";
import { UserCount } from \\"../resolvers/outputs/UserCount\\";

/**
 * User model doc
 */
@ObjectType(\\"User\\", {
  isAbstract: true,
  description: \\"User model doc\\"
})
export class User {
  @Field(_type => Int, {
    nullable: false
  })
  id!: number;

  /**
   * field doc
   */
  @Field(_type => String, {
    nullable: false,
    description: \\"field doc\\"
  })
  stringField!: string;

  @Field(_type => Int, {
    nullable: false
  })
  intField!: number;

  /**
   * multiline doc 1
   * multiline doc 2
   */
  @Field(_type => Boolean, {
    nullable: false,
    description: \\"multiline doc 1\\\\nmultiline doc 2\\"
  })
  boolField!: boolean;

  /**
   * relation doc
   */
  posts?: Post[];

  @Field(_type => UserCount, {
    nullable: true
  })
  _count?: UserCount | null;
}
"
`;

exports[`models should properly generate object type class for prisma model with different scalar fields types: User 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../scalars\\";

@ObjectType(\\"User\\", {
  isAbstract: true
})
export class User {
  @Field(_type => Int, {
    nullable: false
  })
  intIdField!: number;

  @Field(_type => String, {
    nullable: false
  })
  stringField!: string;

  @Field(_type => String, {
    nullable: true
  })
  optionalStringField?: string | null;

  @Field(_type => Int, {
    nullable: false
  })
  intField!: number;

  @Field(_type => Float, {
    nullable: false
  })
  floatField!: number;

  @Field(_type => Boolean, {
    nullable: false
  })
  booleanField!: boolean;

  @Field(_type => Date, {
    nullable: false
  })
  dateField!: Date;

  @Field(_type => GraphQLScalars.JSONResolver, {
    nullable: false
  })
  jsonField!: Prisma.JsonValue;
}
"
`;

exports[`models should properly generate object type class for prisma model with enum and alias fields types: User 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../scalars\\";
import { Sample } from \\"../enums/Sample\\";

@ObjectType(\\"User\\", {
  isAbstract: true
})
export class User {
  @Field(_type => Int, {
    nullable: false
  })
  intIdField!: number;

  @Field(_type => Sample, {
    nullable: false
  })
  enumField!: \\"SAMPLE\\";
}
"
`;

exports[`models should properly generate object type class for prisma model with native types: NativeTypeModel 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../scalars\\";

@ObjectType(\\"NativeTypeModel\\", {
  isAbstract: true
})
export class NativeTypeModel {
  @Field(_type => Int, {
    nullable: false
  })
  id!: number;

  @Field(_type => GraphQLScalars.BigIntResolver, {
    nullable: true
  })
  bigInt?: bigint | null;

  @Field(_type => GraphQLScalars.ByteResolver, {
    nullable: true
  })
  byteA?: Buffer | null;

  @Field(_type => DecimalJSScalar, {
    nullable: true
  })
  decimal?: Prisma.Decimal | null;
}
"
`;

exports[`models should properly generate object type class for prisma model with omitted input field: User 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../scalars\\";

@ObjectType(\\"User\\", {
  isAbstract: true
})
export class User {
  @Field(_type => Int, {
    nullable: false
  })
  id!: number;

  @Field(_type => Date, {
    nullable: false
  })
  dateOfBirth!: Date;

  @Field(_type => String, {
    nullable: false
  })
  name!: string;

  @Field(_type => Float, {
    nullable: true
  })
  balance?: number | null;
}
"
`;

exports[`models should properly generate object type class for prisma model with renamed fields: User 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../scalars\\";
import { Post } from \\"../models/Post\\";
import { UserCount } from \\"../resolvers/outputs/UserCount\\";

@ObjectType(\\"User\\", {
  isAbstract: true
})
export class User {
  @Field(_type => Int, {
    nullable: false
  })
  id!: number;

  @Field(_type => Date, {
    nullable: false
  })
  dateOfBirth!: Date;

  /**
   * renamed field docs
   */
  name!: string;

  balance!: number | null;

  posts?: Post[];

  @Field(_type => UserCount, {
    nullable: true
  })
  _count?: UserCount | null;

  /**
   * renamed field docs
   */
  @Field(_type => String, {
    nullable: false,
    description: \\"renamed field docs\\"
  })
  get firstName(): string {
    return this.name;
  }

  @Field(_type => Float, {
    nullable: true
  })
  get accountBalance(): number | null {
    return this.balance ?? null;
  }
}
"
`;

exports[`models should properly generate object type class for prisma model without omitted output field: User 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../scalars\\";

@ObjectType(\\"User\\", {
  isAbstract: true
})
export class User {
  @Field(_type => Int, {
    nullable: false
  })
  id!: number;

  @Field(_type => Date, {
    nullable: false
  })
  dateOfBirth!: Date;

  @Field(_type => String, {
    nullable: false
  })
  name!: string;

  balance?: number | null;
}
"
`;

exports[`models should properly generate object type classes for prisma models with cyclic relations when models are renamed: Article 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../scalars\\";
import { Client } from \\"../models/Client\\";

@ObjectType(\\"Article\\", {
  isAbstract: true
})
export class Article {
  @Field(_type => Int, {
    nullable: false
  })
  id!: number;

  author?: Client;

  @Field(_type => Int, {
    nullable: false
  })
  authorId!: number;
}
"
`;

exports[`models should properly generate object type classes for prisma models with cyclic relations when models are renamed: Client 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../scalars\\";
import { Article } from \\"../models/Article\\";
import { ClientCount } from \\"../resolvers/outputs/ClientCount\\";

@ObjectType(\\"Client\\", {
  isAbstract: true
})
export class Client {
  @Field(_type => Int, {
    nullable: false
  })
  id!: number;

  posts?: Article[];

  @Field(_type => ClientCount, {
    nullable: true
  })
  _count?: ClientCount | null;
}
"
`;

exports[`models should properly generate object type classes for prisma models with cyclic relations: Post 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../scalars\\";
import { User } from \\"../models/User\\";

@ObjectType(\\"Post\\", {
  isAbstract: true
})
export class Post {
  @Field(_type => Int, {
    nullable: false
  })
  id!: number;

  author?: User;

  @Field(_type => Int, {
    nullable: false
  })
  authorId!: number;
}
"
`;

exports[`models should properly generate object type classes for prisma models with cyclic relations: User 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../scalars\\";
import { Post } from \\"../models/Post\\";
import { UserCount } from \\"../resolvers/outputs/UserCount\\";

@ObjectType(\\"User\\", {
  isAbstract: true
})
export class User {
  @Field(_type => Int, {
    nullable: false
  })
  id!: number;

  posts?: Post[];

  @Field(_type => UserCount, {
    nullable: true
  })
  _count?: UserCount | null;
}
"
`;

exports[`models should properly generate object type classes for prisma models with self relations: Service 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../scalars\\";
import { ServiceCount } from \\"../resolvers/outputs/ServiceCount\\";

@ObjectType(\\"Service\\", {
  isAbstract: true
})
export class Service {
  @Field(_type => Int, {
    nullable: false
  })
  id!: number;

  @Field(_type => String, {
    nullable: false
  })
  name!: string;

  sourceService?: Service | null;

  @Field(_type => Int, {
    nullable: true
  })
  sourceId?: number | null;

  services?: Service[];

  @Field(_type => ServiceCount, {
    nullable: true
  })
  _count?: ServiceCount | null;
}
"
`;

exports[`models when customPrismaImportPath is set to custom directory in node_modules should properly generate Prisma import path for model object type class: SampleModel 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../prisma-client\\";
import { DecimalJSScalar } from \\"../scalars\\";

@ObjectType(\\"SampleModel\\", {
  isAbstract: true
})
export class SampleModel {
  @Field(_type => Int, {
    nullable: false
  })
  intIdField!: number;

  @Field(_type => Int, {
    nullable: false
  })
  intField!: number;

  @Field(_type => Float, {
    nullable: false
  })
  floatField!: number;
}
"
`;

exports[`models when customPrismaImportPath is set to custom repository directory should properly generate Prisma import path for model object type class: SampleModel 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../test/import\\";
import { DecimalJSScalar } from \\"../scalars\\";

@ObjectType(\\"SampleModel\\", {
  isAbstract: true
})
export class SampleModel {
  @Field(_type => Int, {
    nullable: false
  })
  intIdField!: number;

  @Field(_type => Int, {
    nullable: false
  })
  intField!: number;

  @Field(_type => Float, {
    nullable: false
  })
  floatField!: number;
}
"
`;

exports[`models when emitIdAsIDType is set to true should properly generate model object type class: FirstModel 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../scalars\\";

@ObjectType(\\"FirstModel\\", {
  isAbstract: true
})
export class FirstModel {
  @Field(_type => ID, {
    nullable: false
  })
  intIdField!: number;

  @Field(_type => Int, {
    nullable: false
  })
  intField!: number;

  @Field(_type => Float, {
    nullable: false
  })
  floatField!: number;
}
"
`;

exports[`models when emitIdAsIDType is set to true should properly generate model object type class: SecondModel 1`] = `
"import { Args, ArgsType, Context, Field, Float, ID, Info, InputType, Int, Mutation, ObjectType, Query, ResolveField, Resolver, Root, registerEnumType } from \\"@nestjs/graphql\\";
import * as GraphQLScalars from \\"graphql-scalars\\";
import { Prisma } from \\"../../../helpers/prisma-client-mock\\";
import { DecimalJSScalar } from \\"../scalars\\";

@ObjectType(\\"SecondModel\\", {
  isAbstract: true
})
export class SecondModel {
  @Field(_type => ID, {
    nullable: false
  })
  stringIdField!: string;

  @Field(_type => String, {
    nullable: false
  })
  stringField!: string;

  @Field(_type => Boolean, {
    nullable: false
  })
  booleanField!: boolean;
}
"
`;
